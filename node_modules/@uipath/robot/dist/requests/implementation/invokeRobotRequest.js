"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvokeRobotRequest = void 0;
var index_1 = require("../../models/index");
var jobArguments_1 = require("../../Models/jobArguments");
var utils_1 = require("../../utils");
var constants_1 = require("../../utils/constants");
/**
 * Request class to invoke any robot from local system.
 */
var InvokeRobotRequest = /** @class */ (function () {
    /**
     * Default constructor.
     * @param job The robot Job to run.
     */
    function InvokeRobotRequest(job) {
        var _this = this;
        /**
         * Method that sends the request to invoke a robot.
         * @returns Promise of Response model type.
         */
        this.send = function (serverFeatures) {
            var jsonData;
            var url;
            if (serverFeatures.internalArguments) {
                url = _this.url + "&features=internalArguments"; // Added in version 1.2.9
                jsonData = JSON.stringify(new jobArguments_1.JobArguments(_this.job.argument, _this.job.internalArguments));
            }
            else {
                url = _this.url;
                if (_this.job.argument) {
                    jsonData = JSON.stringify(_this.job.argument);
                }
            }
            return utils_1.HttpUtil.post(url, _this.convertToJob, jsonData);
        };
        this.url = '';
        this.job = job;
    }
    /**
     * Set the port to which the request should be sent along with the consent code.
     * @param robotInvocationPort Port on which local listener is running.
     * @param consentCode User consented code.
     */
    InvokeRobotRequest.prototype.set = function (robotInvocationPort, consentCode) {
        this.url = this.getURL(robotInvocationPort, consentCode);
        return this;
    };
    /**
     * Mapper method used to convert string response to desired Job model.
     * @param data HttpResponse data sent from listener.
     * @returns Job to uniquely identify this robot process execution.
     */
    InvokeRobotRequest.prototype.convertToJob = function (data) {
        var job = new index_1.Job('');
        if (data) {
            var jsonResponse = JSON.parse(data).response;
            if (jsonResponse && jsonResponse.JobId) {
                job.jobId = jsonResponse.JobId;
            }
        }
        return job;
    };
    /**
     * Method that returns the request endpoint to which request will be sent.
     * @param robotInvocationPort Port of local listener to which request should be sent.
     * @param consentCode User approved consent code if any.
     */
    InvokeRobotRequest.prototype.getURL = function (robotInvocationPort, consentCode) {
        var url = constants_1.Constants.DEFAULT_ROBOT_INVOKE_DOMAIN + ":" + robotInvocationPort + "/" + constants_1.Constants.INVOKE_ROBOT + "?robotProcessId=" + this.job.processId + "&jobId=" + this.job.jobId;
        return utils_1.UrlUtil.appendConsentCode(url, consentCode);
    };
    return InvokeRobotRequest;
}());
exports.InvokeRobotRequest = InvokeRobotRequest;
