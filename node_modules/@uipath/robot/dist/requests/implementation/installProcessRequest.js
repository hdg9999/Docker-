"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstallProcessRequest = void 0;
var inputArgumentSchema_1 = require("../../models/inputArgumentSchema");
var installProcessResult_1 = require("../../models/installProcessResult");
var utils_1 = require("../../utils");
var constants_1 = require("../../utils/constants");
/**
 * Request class to install a process and retrieve the input arguments schema.
 */
var InstallProcessRequest = /** @class */ (function () {
    /**
     * Default constructor.
     * @param processId Process Id of the process to install.
     */
    function InstallProcessRequest(processId) {
        var _this = this;
        this.processId = processId;
        /**
         * Method that sends the request to install a process.
         * @returns Promise of Response model type.
         */
        this.send = function () { return utils_1.HttpUtil.get(_this.url, _this.convertToResult); };
        this.url = '';
    }
    /**
     * Set the port to which the request should be sent along with the consent code.
     * @param robotInvocationPort Port on which local listener is running.
     * @param consentCode User consented code.
     */
    InstallProcessRequest.prototype.set = function (robotInvocationPort, consentCode) {
        this.url = this.getURL(robotInvocationPort, consentCode);
        return this;
    };
    /**
     * Mapper method used to convert string response to desired InstallProcessResult model.
     * @param data HttpResponse data sent from listener.
     * @returns InstallProcessResult.
     */
    InstallProcessRequest.prototype.convertToResult = function (httpResponse) {
        if (httpResponse) {
            var jsonResponse = JSON.parse(httpResponse);
            if (jsonResponse && jsonResponse.InputArgumentsSchema) {
                var result = new installProcessResult_1.InstallProcessResult(jsonResponse.InputArgumentsSchema.map(function (a) {
                    return new inputArgumentSchema_1.InputArgumentSchema(a.Name, a.Type, a.IsRequired, a.HasDefault);
                }));
                return result;
            }
        }
        return new installProcessResult_1.InstallProcessResult([]);
    };
    /**
     * Method that returns the request endpoint to which request will be sent.
     * @param robotInvocationPort Port of local listener to which request should be sent.
     * @param consentCode User approved consent code if any.
     */
    InstallProcessRequest.prototype.getURL = function (robotInvocationPort, consentCode) {
        var url = constants_1.Constants.DEFAULT_ROBOT_INVOKE_DOMAIN + ":" + robotInvocationPort + "/" + constants_1.Constants.INSTALL_PROCESS + "?robotProcessId=" + this.processId;
        return utils_1.UrlUtil.appendConsentCode(url, consentCode);
    };
    return InstallProcessRequest;
}());
exports.InstallProcessRequest = InstallProcessRequest;
