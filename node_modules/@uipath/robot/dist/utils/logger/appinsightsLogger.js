"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppInsightsLogger = void 0;
var applicationinsights_web_1 = require("@microsoft/applicationinsights-web");
var version_1 = require("../../version");
/**
 * Appinsights logger. Stops logging for locally hosted files as file path might contain user info.
 */
var AppInsightsLogger = /** @class */ (function () {
    function AppInsightsLogger(settings) {
        var _this = this;
        this.appInsights = null;
        this.createLogger = function () {
            if (_this.appInsights != null) {
                return;
            }
            _this.appInsights = new applicationinsights_web_1.ApplicationInsights({
                config: {
                    instrumentationKey: '025bfd02-04e8-4969-8293-94a1ec738e4e',
                    disableAjaxTracking: true,
                    disableExceptionTracking: true,
                }
            });
            _this.appInsights.loadAppInsights();
            _this.appInsights.core.logger.maxInternalMessageLimit = function () { return 0; }; // suppress 'AI (Internal)' messages (which are sent to 'traces' in Azure AppInsights)
            _this.appInsights.addTelemetryInitializer(function (envelope) {
                if (envelope.tags != undefined) {
                    envelope.tags['ai.operation.name'] = 'UiPathRobotJS';
                }
            });
        };
        this.skipTelemetry = function () { return window.location.protocol === 'file:' || _this.settings.disableTelemetry; };
        /**
        * Trace event method
        * @param event event name
        * @param properties properties to log along with the event.
        */
        this.trace = function (event, properties, appName) {
            var _a;
            if (_this.skipTelemetry()) {
                return;
            }
            _this.createLogger();
            (_a = _this.appInsights) === null || _a === void 0 ? void 0 : _a.trackEvent({
                name: event.toString(),
                properties: { application: appName, version: version_1.ROBOTJS_VERSION }
            }, properties);
        };
        /**
        * Tracing error
        * @param event event name
        * @param error Error to trace.
        */
        this.traceError = function (event, error, appName) {
            var _a;
            if (_this.skipTelemetry()) {
                return;
            }
            _this.createLogger();
            (_a = _this.appInsights) === null || _a === void 0 ? void 0 : _a.trackException({
                properties: { method: event.toString(), application: appName, version: version_1.ROBOTJS_VERSION },
                exception: new Error(error),
            });
        };
        this.settings = settings;
    }
    return AppInsightsLogger;
}());
exports.AppInsightsLogger = AppInsightsLogger;
