"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = void 0;
/**
 * Generic response model
 */
var Response = /** @class */ (function () {
    /**
     *
     * @param httpStatus Http status of the response
     * @param statusText Http status text of the response
     * @param isDomainAllowed Flag returned by the Server, saying if the domain is allowed by configuration
     * @param data Response data if any
     * @param error Handled error response if any
     */
    function Response(httpStatus, statusText, isDomainAllowed, data, error) {
        var _this = this;
        this.httpStatus = httpStatus;
        this.statusText = statusText;
        this.isDomainAllowed = isDomainAllowed;
        this.data = data;
        this.error = error;
        /**
         * Resolve promise if its a successful response. Throws error if response was unsuccessful.
         * @param promise promise which will be resolved if response was successful.
         */
        this.resolve = function (promise) {
            if (_this.isSuccess) {
                promise.resolve(_this.data);
            }
            else {
                promise.reject(new Error(_this.httpStatus + " - " + _this.error));
            }
        };
        this.data = data || undefined;
    }
    Object.defineProperty(Response.prototype, "isSuccess", {
        get: function () { return this.httpStatus >= 200 && this.httpStatus < 300; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Response.prototype, "isUnauthorized", {
        get: function () { return this.httpStatus === 401; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Response.prototype, "isForbidden", {
        get: function () { return this.httpStatus === 403; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Response.prototype, "isEmpty", {
        get: function () { return this.httpStatus === 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Response.prototype, "isNotFound", {
        get: function () { return this.httpStatus === 404; },
        enumerable: false,
        configurable: true
    });
    return Response;
}());
exports.Response = Response;
